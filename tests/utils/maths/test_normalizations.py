"""Contains the test code for the mana.utils.math.normalization module."""

import pytest
import numpy as np
import mana.utils.math.normalizations as n


@pytest.mark.parametrize(
    'var, expected',
    [
        (np.array([
            [[2, 3, 4], [5, 1, 2], [3, 3, 3], [1, 0, 1]],
            [[1, 2, 3], [3, 2, 1], [4, 0, 3], [5, 4, 2]],
            [[3, 5, 4], [0, 0, 1], [2, 1, 2], [3, 2, 1]],
        ]),
         np.array([
             [[-0.75, 1.25, 1.5], [2.25, -0.75, -0.5], [0.25, 1.25, 0.5],
              [-1.75, -1.75, -1.5]],
             [[-1.75, 0.25, 0.5], [0.25, 0.25, -1.5], [1.25, -1.75, 0.5],
              [2.25, 2.25, -0.5]],
             [[0.25, 3.25, 1.5], [-2.75, -1.75, -1.5], [-0.75, -0.75, -0.5],
              [0.25, 0.25, -1.5]],
         ])),
        (np.array([
            [[1, 1, 1, 0], [2, 0, 3, 0]],
            [[3, 1, 2, 3], [0, 1, 0, 1]],
            [[0, 0, 0, 0], [5, 1, 4, 2]],
            [[3, 3, 1, 0], [4, 3, 2, 1]],
            [[3, 1, 0, 5], [1, 1, 0, 0]],
        ]),
         np.array([
             [[-0.5, 0.5, -1, 0], [0.5, -0.5, 1, 0]],
             [[1.5, 0.5, 0, 3], [-1.5, 0.5, -2, 1]],
             [[-1.5, -0.5, -2, 0], [3.5, 0.5, 2, 2]],
             [[1.5, 2.5, -1, 0], [2.5, 2.5, 0, 1]],
             [[1.5, 0.5, -2, 5], [-0.5, 0.5, -2, 0]],
         ])),
        (np.array([[[[
            [[1, 1, 1, 0], [2, 0, 3, 0]],
            [[3, 1, 2, 3], [0, 1, 0, 1]],
            [[0, 0, 0, 0], [5, 1, 4, 2]],
            [[3, 3, 1, 0], [4, 3, 2, 1]],
            [[3, 1, 0, 5], [1, 1, 0, 0]],
        ]]]]),
         np.array([[[[
             [[-0.5, 0.5, -1, 0], [0.5, -0.5, 1, 0]],
             [[1.5, 0.5, 0, 3], [-1.5, 0.5, -2, 1]],
             [[-1.5, -0.5, -2, 0], [3.5, 0.5, 2, 2]],
             [[1.5, 2.5, -1, 0], [2.5, 2.5, 0, 1]],
             [[1.5, 0.5, -2, 5], [-0.5, 0.5, -2, 0]],
         ]]]])),
    ],
)
def test_first_pose_mean(var, expected):
    """Tests if the mean from the first frame is computed and subtracted from all frames."""
    assert (n.first_pose_mean(var) == expected).all()
